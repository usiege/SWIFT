sil_stage canonical

import Builtin
import Swift
import SwiftShims

import Foundation

struct Skill {
  enum KeyType {
    case up
    case down
    case left
    case right
    @_implements(Equatable, ==(_:_:)) static func __derived_enum_equals(_ a: Skill.KeyType, _ b: Skill.KeyType) -> Bool
    var hashValue: Int { get }
    func hash(into hasher: inout Hasher)
  }
  @_hasStorage let key: Skill.KeyType { get }
  func launchSkill()
  init(key: Skill.KeyType)
}

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

// static Skill.KeyType.__derived_enum_equals(_:_:)
sil hidden @$s4main5SkillV7KeyTypeO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (Skill.KeyType, Skill.KeyType, @thin Skill.KeyType.Type) -> Bool {
// %0                                             // users: %7, %3
// %1                                             // users: %33, %4
// %2                                             // user: %5
bb0(%0 : $Skill.KeyType, %1 : $Skill.KeyType, %2 : $@thin Skill.KeyType.Type):
  debug_value %0 : $Skill.KeyType, let, name "a", argno 1 // id: %3
  debug_value %1 : $Skill.KeyType, let, name "b", argno 2 // id: %4
  debug_value %2 : $@thin Skill.KeyType.Type, let, name "self", argno 3 // id: %5
  %6 = alloc_stack $Int, var, name "index_a"      // users: %58, %28, %22, %16, %10, %65
  switch_enum %0 : $Skill.KeyType, case #Skill.KeyType.up!enumelt: bb1, case #Skill.KeyType.down!enumelt: bb2, case #Skill.KeyType.left!enumelt: bb3, case #Skill.KeyType.right!enumelt: bb4 // id: %7

bb1:                                              // Preds: bb0
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = struct $Int (%8 : $Builtin.Int64)          // user: %11
  %10 = begin_access [modify] [static] %6 : $*Int // users: %11, %12
  store %9 to %10 : $*Int                         // id: %11
  end_access %10 : $*Int                          // id: %12
  br bb5                                          // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int64, 1         // user: %15
  %15 = struct $Int (%14 : $Builtin.Int64)        // user: %17
  %16 = begin_access [modify] [static] %6 : $*Int // users: %17, %18
  store %15 to %16 : $*Int                        // id: %17
  end_access %16 : $*Int                          // id: %18
  br bb5                                          // id: %19

bb3:                                              // Preds: bb0
  %20 = integer_literal $Builtin.Int64, 2         // user: %21
  %21 = struct $Int (%20 : $Builtin.Int64)        // user: %23
  %22 = begin_access [modify] [static] %6 : $*Int // users: %23, %24
  store %21 to %22 : $*Int                        // id: %23
  end_access %22 : $*Int                          // id: %24
  br bb5                                          // id: %25

bb4:                                              // Preds: bb0
  %26 = integer_literal $Builtin.Int64, 3         // user: %27
  %27 = struct $Int (%26 : $Builtin.Int64)        // user: %29
  %28 = begin_access [modify] [static] %6 : $*Int // users: %29, %30
  store %27 to %28 : $*Int                        // id: %29
  end_access %28 : $*Int                          // id: %30
  br bb5                                          // id: %31

bb5:                                              // Preds: bb4 bb3 bb2 bb1
  %32 = alloc_stack $Int, var, name "index_b"     // users: %59, %54, %48, %42, %36, %64
  switch_enum %1 : $Skill.KeyType, case #Skill.KeyType.up!enumelt: bb6, case #Skill.KeyType.down!enumelt: bb7, case #Skill.KeyType.left!enumelt: bb8, case #Skill.KeyType.right!enumelt: bb9 // id: %33

bb6:                                              // Preds: bb5
  %34 = integer_literal $Builtin.Int64, 0         // user: %35
  %35 = struct $Int (%34 : $Builtin.Int64)        // user: %37
  %36 = begin_access [modify] [static] %32 : $*Int // users: %37, %38
  store %35 to %36 : $*Int                        // id: %37
  end_access %36 : $*Int                          // id: %38
  br bb10                                         // id: %39

bb7:                                              // Preds: bb5
  %40 = integer_literal $Builtin.Int64, 1         // user: %41
  %41 = struct $Int (%40 : $Builtin.Int64)        // user: %43
  %42 = begin_access [modify] [static] %32 : $*Int // users: %43, %44
  store %41 to %42 : $*Int                        // id: %43
  end_access %42 : $*Int                          // id: %44
  br bb10                                         // id: %45

bb8:                                              // Preds: bb5
  %46 = integer_literal $Builtin.Int64, 2         // user: %47
  %47 = struct $Int (%46 : $Builtin.Int64)        // user: %49
  %48 = begin_access [modify] [static] %32 : $*Int // users: %49, %50
  store %47 to %48 : $*Int                        // id: %49
  end_access %48 : $*Int                          // id: %50
  br bb10                                         // id: %51

bb9:                                              // Preds: bb5
  %52 = integer_literal $Builtin.Int64, 3         // user: %53
  %53 = struct $Int (%52 : $Builtin.Int64)        // user: %55
  %54 = begin_access [modify] [static] %32 : $*Int // users: %55, %56
  store %53 to %54 : $*Int                        // id: %55
  end_access %54 : $*Int                          // id: %56
  br bb10                                         // id: %57

bb10:                                             // Preds: bb9 bb8 bb7 bb6
  %58 = load %6 : $*Int                           // user: %60
  %59 = load %32 : $*Int                          // user: %61
  %60 = struct_extract %58 : $Int, #Int._value    // user: %62
  %61 = struct_extract %59 : $Int, #Int._value    // user: %62
  %62 = builtin "cmp_eq_Int64"(%60 : $Builtin.Int64, %61 : $Builtin.Int64) : $Builtin.Int1 // user: %63
  %63 = struct $Bool (%62 : $Builtin.Int1)        // user: %66
  dealloc_stack %32 : $*Int                       // id: %64
  dealloc_stack %6 : $*Int                        // id: %65
  return %63 : $Bool                              // id: %66
} // end sil function '$s4main5SkillV7KeyTypeO21__derived_enum_equalsySbAE_AEtFZ'

// Int.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] @$sSi22_builtinIntegerLiteralSiBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin Int.Type) -> Int {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin Int.Type):
  %2 = builtin "s_to_s_checked_trunc_IntLiteral_Int64"(%0 : $Builtin.IntLiteral) : $(Builtin.Int64, Builtin.Int1) // user: %3
  %3 = tuple_extract %2 : $(Builtin.Int64, Builtin.Int1), 0 // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %5
  return %4 : $Int                                // id: %5
} // end sil function '$sSi22_builtinIntegerLiteralSiBI_tcfC'

// static Int.== infix(_:_:)
sil public_external [transparent] [serialized] @$sSi2eeoiySbSi_SitFZ : $@convention(method) (Int, Int, @thin Int.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $Int, %1 : $Int, %2 : $@thin Int.Type):
  %3 = struct_extract %0 : $Int, #Int._value      // user: %5
  %4 = struct_extract %1 : $Int, #Int._value      // user: %5
  %5 = builtin "cmp_eq_Int64"(%3 : $Builtin.Int64, %4 : $Builtin.Int64) : $Builtin.Int1 // user: %6
  %6 = struct $Bool (%5 : $Builtin.Int1)          // user: %7
  return %6 : $Bool                               // id: %7
} // end sil function '$sSi2eeoiySbSi_SitFZ'

// Skill.KeyType.hashValue.getter
sil hidden @$s4main5SkillV7KeyTypeO9hashValueSivg : $@convention(method) (Skill.KeyType) -> Int {
// %0                                             // users: %3, %1
bb0(%0 : $Skill.KeyType):
  debug_value %0 : $Skill.KeyType, let, name "self", argno 1 // id: %1
  %2 = alloc_stack $Skill.KeyType                 // users: %3, %6, %5
  store %0 to %2 : $*Skill.KeyType                // id: %3
  // function_ref _hashValue<A>(for:)
  %4 = function_ref @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %5
  %5 = apply %4<Skill.KeyType>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int // user: %7
  dealloc_stack %2 : $*Skill.KeyType              // id: %6
  return %5 : $Int                                // id: %7
} // end sil function '$s4main5SkillV7KeyTypeO9hashValueSivg'

// _hashValue<A>(for:)
sil [serialized] [always_inline] @$ss10_hashValue3forSix_tSHRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0) -> Int

// Skill.KeyType.hash(into:)
sil hidden @$s4main5SkillV7KeyTypeO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, Skill.KeyType) -> () {
// %0                                             // users: %35, %2
// %1                                             // users: %5, %3
bb0(%0 : $*Hasher, %1 : $Skill.KeyType):
  debug_value_addr %0 : $*Hasher, var, name "hasher", argno 1 // id: %2
  debug_value %1 : $Skill.KeyType, let, name "self", argno 2 // id: %3
  %4 = alloc_stack $Int, var, name "discriminator" // users: %30, %26, %20, %14, %8, %40
  switch_enum %1 : $Skill.KeyType, case #Skill.KeyType.up!enumelt: bb1, case #Skill.KeyType.down!enumelt: bb2, case #Skill.KeyType.left!enumelt: bb3, case #Skill.KeyType.right!enumelt: bb4 // id: %5

bb1:                                              // Preds: bb0
  %6 = integer_literal $Builtin.Int64, 0          // user: %7
  %7 = struct $Int (%6 : $Builtin.Int64)          // user: %9
  %8 = begin_access [modify] [static] %4 : $*Int  // users: %9, %10
  store %7 to %8 : $*Int                          // id: %9
  end_access %8 : $*Int                           // id: %10
  br bb5                                          // id: %11

bb2:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int64, 1         // user: %13
  %13 = struct $Int (%12 : $Builtin.Int64)        // user: %15
  %14 = begin_access [modify] [static] %4 : $*Int // users: %15, %16
  store %13 to %14 : $*Int                        // id: %15
  end_access %14 : $*Int                          // id: %16
  br bb5                                          // id: %17

bb3:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 2         // user: %19
  %19 = struct $Int (%18 : $Builtin.Int64)        // user: %21
  %20 = begin_access [modify] [static] %4 : $*Int // users: %21, %22
  store %19 to %20 : $*Int                        // id: %21
  end_access %20 : $*Int                          // id: %22
  br bb5                                          // id: %23

bb4:                                              // Preds: bb0
  %24 = integer_literal $Builtin.Int64, 3         // user: %25
  %25 = struct $Int (%24 : $Builtin.Int64)        // user: %27
  %26 = begin_access [modify] [static] %4 : $*Int // users: %27, %28
  store %25 to %26 : $*Int                        // id: %27
  end_access %26 : $*Int                          // id: %28
  br bb5                                          // id: %29

bb5:                                              // Preds: bb4 bb3 bb2 bb1
  %30 = begin_access [read] [static] %4 : $*Int   // users: %31, %32
  %31 = load %30 : $*Int                          // user: %34
  end_access %30 : $*Int                          // id: %32
  %33 = alloc_stack $Int                          // users: %34, %39, %37
  store %31 to %33 : $*Int                        // id: %34
  %35 = begin_access [modify] [static] %0 : $*Hasher // users: %38, %37
  // function_ref Hasher.combine<A>(_:)
  %36 = function_ref @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> () // user: %37
  %37 = apply %36<Int>(%33, %35) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()
  end_access %35 : $*Hasher                       // id: %38
  dealloc_stack %33 : $*Int                       // id: %39
  dealloc_stack %4 : $*Int                        // id: %40
  %41 = tuple ()                                  // user: %42
  return %41 : $()                                // id: %42
} // end sil function '$s4main5SkillV7KeyTypeO4hash4intoys6HasherVz_tF'

// Hasher.combine<A>(_:)
sil [serialized] [always_inline] @$ss6HasherV7combineyyxSHRzlF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (@in_guaranteed τ_0_0, @inout Hasher) -> ()

// protocol witness for static Equatable.== infix(_:_:) in conformance Skill.KeyType
sil private [transparent] [thunk] @$s4main5SkillV7KeyTypeOSQAASQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed Skill.KeyType, @in_guaranteed Skill.KeyType, @thick Skill.KeyType.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*Skill.KeyType, %1 : $*Skill.KeyType, %2 : $@thick Skill.KeyType.Type):
  %3 = load %0 : $*Skill.KeyType                  // user: %7
  %4 = load %1 : $*Skill.KeyType                  // user: %7
  %5 = metatype $@thin Skill.KeyType.Type         // user: %7
  // function_ref static Skill.KeyType.__derived_enum_equals(_:_:)
  %6 = function_ref @$s4main5SkillV7KeyTypeO21__derived_enum_equalsySbAE_AEtFZ : $@convention(method) (Skill.KeyType, Skill.KeyType, @thin Skill.KeyType.Type) -> Bool // user: %7
  %7 = apply %6(%3, %4, %5) : $@convention(method) (Skill.KeyType, Skill.KeyType, @thin Skill.KeyType.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s4main5SkillV7KeyTypeOSQAASQ2eeoiySbx_xtFZTW'

// protocol witness for Hashable.hashValue.getter in conformance Skill.KeyType
sil private [transparent] [thunk] @$s4main5SkillV7KeyTypeOSHAASH9hashValueSivgTW : $@convention(witness_method: Hashable) (@in_guaranteed Skill.KeyType) -> Int {
// %0                                             // user: %1
bb0(%0 : $*Skill.KeyType):
  %1 = load %0 : $*Skill.KeyType                  // user: %3
  // function_ref Skill.KeyType.hashValue.getter
  %2 = function_ref @$s4main5SkillV7KeyTypeO9hashValueSivg : $@convention(method) (Skill.KeyType) -> Int // user: %3
  %3 = apply %2(%1) : $@convention(method) (Skill.KeyType) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main5SkillV7KeyTypeOSHAASH9hashValueSivgTW'

// protocol witness for Hashable.hash(into:) in conformance Skill.KeyType
sil private [transparent] [thunk] @$s4main5SkillV7KeyTypeOSHAASH4hash4intoys6HasherVz_tFTW : $@convention(witness_method: Hashable) (@inout Hasher, @in_guaranteed Skill.KeyType) -> () {
// %0                                             // user: %4
// %1                                             // user: %2
bb0(%0 : $*Hasher, %1 : $*Skill.KeyType):
  %2 = load %1 : $*Skill.KeyType                  // user: %4
  // function_ref Skill.KeyType.hash(into:)
  %3 = function_ref @$s4main5SkillV7KeyTypeO4hash4intoys6HasherVz_tF : $@convention(method) (@inout Hasher, Skill.KeyType) -> () // user: %4
  %4 = apply %3(%0, %2) : $@convention(method) (@inout Hasher, Skill.KeyType) -> ()
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$s4main5SkillV7KeyTypeOSHAASH4hash4intoys6HasherVz_tFTW'

// protocol witness for Hashable._rawHashValue(seed:) in conformance Skill.KeyType
sil private [transparent] [thunk] [always_inline] @$s4main5SkillV7KeyTypeOSHAASH13_rawHashValue4seedS2i_tFTW : $@convention(witness_method: Hashable) (Int, @in_guaranteed Skill.KeyType) -> Int {
// %0                                             // user: %3
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $*Skill.KeyType):
  // function_ref Hashable._rawHashValue(seed:)
  %2 = function_ref @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %3
  %3 = apply %2<Skill.KeyType>(%0, %1) : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int // user: %4
  return %3 : $Int                                // id: %4
} // end sil function '$s4main5SkillV7KeyTypeOSHAASH13_rawHashValue4seedS2i_tFTW'

// Hashable._rawHashValue(seed:)
sil [serialized] [always_inline] @$sSHsE13_rawHashValue4seedS2i_tF : $@convention(method) <τ_0_0 where τ_0_0 : Hashable> (Int, @in_guaranteed τ_0_0) -> Int

// Skill.key.getter
sil hidden [transparent] @$s4main5SkillV3keyAC7KeyTypeOvg : $@convention(method) (Skill) -> Skill.KeyType {
// %0                                             // users: %2, %1
bb0(%0 : $Skill):
  debug_value %0 : $Skill, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Skill, #Skill.key     // user: %3
  return %2 : $Skill.KeyType                      // id: %3
} // end sil function '$s4main5SkillV3keyAC7KeyTypeOvg'

// Skill.launchSkill()
sil hidden @$s4main5SkillV06launchB0yyF : $@convention(method) (Skill) -> () {
// %0                                             // users: %2, %1
bb0(%0 : $Skill):
  debug_value %0 : $Skill, let, name "self", argno 1 // id: %1
  %2 = struct_extract %0 : $Skill, #Skill.key     // user: %3
  switch_enum %2 : $Skill.KeyType, case #Skill.KeyType.left!enumelt: bb1, case #Skill.KeyType.right!enumelt: bb2, case #Skill.KeyType.down!enumelt: bb4, case #Skill.KeyType.up!enumelt: bb5 // id: %3

bb1:                                              // Preds: bb0
  br bb3                                          // id: %4

bb2:                                              // Preds: bb0
  br bb3                                          // id: %5

bb3:                                              // Preds: bb2 bb1
  %6 = integer_literal $Builtin.Word, 1           // user: %8
  // function_ref _allocateUninitializedArray<A>(_:)
  %7 = function_ref @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %8
  %8 = apply %7<Any>(%6) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %10, %9
  %9 = tuple_extract %8 : $(Array<Any>, Builtin.RawPointer), 0 // users: %28, %25
  %10 = tuple_extract %8 : $(Array<Any>, Builtin.RawPointer), 1 // user: %11
  %11 = pointer_to_address %10 : $Builtin.RawPointer to [strict] $*Any // user: %18
  %12 = string_literal utf8 "left, right"         // user: %17
  %13 = integer_literal $Builtin.Word, 11         // user: %17
  %14 = integer_literal $Builtin.Int1, -1         // user: %17
  %15 = metatype $@thin String.Type               // user: %17
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %16 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %17
  %17 = apply %16(%12, %13, %14, %15) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %19
  %18 = init_existential_addr %11 : $*Any, $String // user: %19
  store %17 to %18 : $*String                     // id: %19
  // function_ref default argument 1 of print(_:separator:terminator:)
  %20 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String // user: %21
  %21 = apply %20() : $@convention(thin) () -> @owned String // users: %27, %25
  // function_ref default argument 2 of print(_:separator:terminator:)
  %22 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String // user: %23
  %23 = apply %22() : $@convention(thin) () -> @owned String // users: %26, %25
  // function_ref print(_:separator:terminator:)
  %24 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %25
  %25 = apply %24(%9, %21, %23) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %23 : $String                     // id: %26
  release_value %21 : $String                     // id: %27
  release_value %9 : $Array<Any>                  // id: %28
  br bb7                                          // id: %29

bb4:                                              // Preds: bb0
  br bb6                                          // id: %30

bb5:                                              // Preds: bb0
  br bb6                                          // id: %31

bb6:                                              // Preds: bb5 bb4
  %32 = integer_literal $Builtin.Word, 1          // user: %34
  // function_ref _allocateUninitializedArray<A>(_:)
  %33 = function_ref @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // user: %34
  %34 = apply %33<Any>(%32) : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer) // users: %36, %35
  %35 = tuple_extract %34 : $(Array<Any>, Builtin.RawPointer), 0 // users: %54, %51
  %36 = tuple_extract %34 : $(Array<Any>, Builtin.RawPointer), 1 // user: %37
  %37 = pointer_to_address %36 : $Builtin.RawPointer to [strict] $*Any // user: %44
  %38 = string_literal utf8 "up, down"            // user: %43
  %39 = integer_literal $Builtin.Word, 8          // user: %43
  %40 = integer_literal $Builtin.Int1, -1         // user: %43
  %41 = metatype $@thin String.Type               // user: %43
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %42 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %43
  %43 = apply %42(%38, %39, %40, %41) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %45
  %44 = init_existential_addr %37 : $*Any, $String // user: %45
  store %43 to %44 : $*String                     // id: %45
  // function_ref default argument 1 of print(_:separator:terminator:)
  %46 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String // user: %47
  %47 = apply %46() : $@convention(thin) () -> @owned String // users: %53, %51
  // function_ref default argument 2 of print(_:separator:terminator:)
  %48 = function_ref @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String // user: %49
  %49 = apply %48() : $@convention(thin) () -> @owned String // users: %52, %51
  // function_ref print(_:separator:terminator:)
  %50 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %51
  %51 = apply %50(%35, %47, %49) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  release_value %49 : $String                     // id: %52
  release_value %47 : $String                     // id: %53
  release_value %35 : $Array<Any>                 // id: %54
  br bb7                                          // id: %55

bb7:                                              // Preds: bb6 bb3
  %56 = tuple ()                                  // user: %57
  return %56 : $()                                // id: %57
} // end sil function '$s4main5SkillV06launchB0yyF'

// _allocateUninitializedArray<A>(_:)
sil [serialized] [always_inline] [_semantics "array.uninitialized_intrinsic"] @$ss27_allocateUninitializedArrayySayxG_BptBwlF : $@convention(thin) <τ_0_0> (Builtin.Word) -> (@owned Array<τ_0_0>, Builtin.RawPointer)

// String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
sil [serialized] [always_inline] [readonly] [_semantics "string.makeUTF8"] @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String

// default argument 1 of print(_:separator:terminator:)
sil shared_external [serialized] @$ss5print_9separator10terminatoryypd_S2StFfA0_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 " "                    // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$ss5print_9separator10terminatoryypd_S2StFfA0_'

// default argument 2 of print(_:separator:terminator:)
sil shared_external [serialized] @$ss5print_9separator10terminatoryypd_S2StFfA1_ : $@convention(thin) () -> @owned String {
bb0:
  %0 = string_literal utf8 "\n"                   // user: %5
  %1 = integer_literal $Builtin.Word, 1           // user: %5
  %2 = integer_literal $Builtin.Int1, -1          // user: %5
  %3 = metatype $@thin String.Type                // user: %5
  // function_ref String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)
  %4 = function_ref @$sSS21_builtinStringLiteral17utf8CodeUnitCount7isASCIISSBp_BwBi1_tcfC : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %5
  %5 = apply %4(%0, %1, %2, %3) : $@convention(method) (Builtin.RawPointer, Builtin.Word, Builtin.Int1, @thin String.Type) -> @owned String // user: %6
  return %5 : $String                             // id: %6
} // end sil function '$ss5print_9separator10terminatoryypd_S2StFfA1_'

// print(_:separator:terminator:)
sil @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// Skill.init(key:)
sil hidden @$s4main5SkillV3keyA2C7KeyTypeO_tcfC : $@convention(method) (Skill.KeyType, @thin Skill.Type) -> Skill {
// %0                                             // user: %2
bb0(%0 : $Skill.KeyType, %1 : $@thin Skill.Type):
  %2 = struct $Skill (%0 : $Skill.KeyType)        // user: %3
  return %2 : $Skill                              // id: %3
} // end sil function '$s4main5SkillV3keyA2C7KeyTypeO_tcfC'

sil_witness_table hidden Skill.KeyType: Equatable module main {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$s4main5SkillV7KeyTypeOSQAASQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance Skill.KeyType
}

sil_witness_table hidden Skill.KeyType: Hashable module main {
  base_protocol Equatable: Skill.KeyType: Equatable module main
  method #Hashable.hashValue!getter.1: <Self where Self : Hashable> (Self) -> () -> Int : @$s4main5SkillV7KeyTypeOSHAASH9hashValueSivgTW	// protocol witness for Hashable.hashValue.getter in conformance Skill.KeyType
  method #Hashable.hash!1: <Self where Self : Hashable> (Self) -> (inout Hasher) -> () : @$s4main5SkillV7KeyTypeOSHAASH4hash4intoys6HasherVz_tFTW	// protocol witness for Hashable.hash(into:) in conformance Skill.KeyType
  method #Hashable._rawHashValue!1: <Self where Self : Hashable> (Self) -> (Int) -> Int : @$s4main5SkillV7KeyTypeOSHAASH13_rawHashValue4seedS2i_tFTW	// protocol witness for Hashable._rawHashValue(seed:) in conformance Skill.KeyType
}



